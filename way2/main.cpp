#include <iostream>
#include <iomanip>
#include <string>


long double precomputedBiases[] =
        {
                3.7168146928204135230,
                5.7522203923062028461,
                0.9735361584457501688,
                3.4521762772779152118,
                3.1058362368812197340,
                5.9256211400938514329,
                2.7075436363222360367,
                1.9426951345040144600,
                0.5773954235013851694,
                5.7739542350138516940,
                1.1908745855222386486,
                5.6255605480428000094,
                5.9901230229913082790,
                3.3525624652968044982,
                2.1096981170701125979,
                2.2474252491623665482,
                3.6246965700849060518,
                4.8310391649511281334,
                4.3280944992541759956,
                5.5818331494642410947,
                5.5528490372057191319,
                5.2630079146204995036,
                2.3645966887683032206,
                4.7964109661442727759,
                3.9818125111856224206,
                2.1190132687787053446,
                2.3405767662482940156,
                4.5562117409441807260,
                1.5798202591847019220,
                3.2318319774878462664,
                0.9023932389805302803,
                2.7407470826257163261,
                2.2747295975388173542,
                3.8977400538494141114,
                1.2782886954166222534,
                0.2165163398070495806,
                2.1651633980704958061,
                2.8020780591661986311,
                2.8880393629436404039,
                3.7476524007180581313,
                6.0605974712826489287,
                4.0573069482102109955,
                2.8739576390245910943,
                3.6068351615275650356,
                4.6524250793777179716,
                2.5419536435200743781,
                0.2867952064823978737,
                2.8679520648239787370,
                3.5467794195214414629,
                4.0518676593164822448,
                2.8195647500873035867,
                3.0629062721546899593,
                5.4963214928285536861,
                4.6977324708488450457,
                2.9950275582313451190,
                4.8175343535951052831,
                4.1930463856939474931,
                4.2313520138619560700,
                4.6144082955420418388,
                2.1617858051633130496,
                2.7683021300943710657,
                2.5502800722253647501,
                0.3700594935353015939,
                3.7005949353530159397,
                5.5900228176322270130,
                5.6347457188855783153,
                6.0819747314190913382,
                4.2710795495746350905,
                5.0116836526688320435,
                6.1345393764312150973,
                4.7967259996958726813,
                3.9849628467016214755,
                2.1505166239386958935,
                2.6556103178481995045,
                1.4233619497636491375,
                1.6672488832773184216,
                4.1061182184140112627,
                3.3620703410625937657,
                2.2047768747280052725,
                3.1982128257412932950,
                0.5662017215150005654,
                5.6620172151500056548,
                0.0715043868837782560,
                0.7150438688377825604,
                0.8672533811982391276,
                2.3893485048028047998,
                5.0439291264892885681,
                0.1738088074561938657,
                1.7380880745619386578,
                4.8145101312602136249,
                4.1628041623450309113,
                3.9289297803727902519,
                1.5901859606503836576,
                3.3354889921446636231,
                1.9389633855487038466,
                0.5400779339482790357,
                5.4007793394827903570,
                3.7423109373912117555,
                6.0071828380141851711,
                3.5231606155255734195,
                3.8156796193578018112,
                0.4576843505004992513,
                4.5768435050049925139,
                1.7861378997928198011,
                5.2950083835690250575,
                2.6846013782535587603,
                1.7132725538172416962,
                4.5663549238132440089,
                1.6812520878753347505,
                4.2461502643941745519,
                4.7623908008642266574,
                3.6416108583851612360,
                5.0001820479536799762,
                6.0195233292796944237,
                3.6465655281806659449,
                5.0497287459087270649,
                0.2318050016505788336,
                2.3180500165057883369,
                4.3309442435191239384,
                5.6103305921137205229,
                5.8378234637005134136,
                1.8295668723888558443,
                5.7292981095293854899,
                0.7443133306775766068,
                1.1599479995961795911,
                5.3162946887822094343,
                2.8974644303854025281,
                3.8419030751356793737,
                0.7199189082792748757,
                0.9160037756131622804,
                2.8768524489520363273,
                3.6357832608020173659,
                4.9419060721222412750,
                5.4367635709653074119,
                4.1021532522163823045,
                3.3224206790863041842,
                1.8082802549651094576,
                5.5164319352919216231,
                4.8988368954825244158,
                5.0060718045681388202,
                6.0784208954242828644,
                4.2355411896265503523,
                4.6563000531879846620,
                2.5807033816227412817,
                0.6742925875090669093,
                0.4597405679110826161,
                4.5974056791108261613,
                1.9917596408511562748,
                1.0680404869728033176,
                4.3972195625484466998,
                6.2730837824069481373,
                6.1821700594532030809,
                5.2730328299157525170,
                2.4648458417208333550,
                5.7989024956695741195,
                1.4403571920794629028,
                1.8372013064354560750,
                5.8056424499953877964,
                1.5077567353375996724,
                2.5111967390168237706,
                6.2624114686294782760,
                6.0754469216785044680,
                4.2058014521687663878,
                4.3589026786101450170,
                5.8899149430239313086,
                2.3504816656230347937,
                4.6552607346915885068,
                2.5703101966587797299,
                0.5703607378694513920,
                5.7036073786945139201,
                0.4874060223288609090,
                4.8740602232886090901,
                4.7583050826289855635,
                3.6007536760327502967,
                4.5916102244295705826,
                1.9338050940386004878,
                0.4884950188472454477,
                4.8849501884724544772,
                4.8672047344674394335,
                4.6897501944172889974,
                2.9152047939157846360,
                4.0193067104395004531,
                2.4939552613174856703,
                6.0899966916360972725,
                4.3512991517446944330,
                5.8138796743694254687,
                1.5901289790779763951,
                3.3349191764205909976,
                1.9332652283079775920,
                0.4830963615410164899,
                4.8309636154101648997,
                4.3273390038445436590,
                5.5742781953679177289,
                5.4772994962424854743,
                4.5075125049881629285,
                1.0928278996245239468,
                4.6450936890656529913,
                2.4686397403994245753,
                5.8368414824554863229,
                1.8197470599385849370,
                5.6310999850266764163,
                6.0455173928300723477,
                3.9065061636844451851,
                1.3659497937669329899,
                1.0931273233101569456,
                4.6480879259219829794,
                2.4985821089627244557,
                6.1362651680884851263,
                4.8139839162685729716,
                4.1575420124286243778,
                3.8763082812087249168,
                1.0639709690097303069,
                4.3565243829177165930,
                5.8661319860996470690,
                2.1126520963801923979,
                2.2769650422631645486,
                3.9200945010928860556,
                1.5018331678513416954,
                2.4519610641542440004,
                5.6700547200036805735,
                0.1518794354205274434,
                1.5187943542052744348,
                2.6215729276935713941,
                1.0829880482173680342,
                4.5466951749940938653,
                1.4846545996838333151,
                2.2801753824791601972,
                3.9521979032528425419,
                1.8228671894509065581,
                5.6623012801498926276,
                0.0743450368826479842,
                0.7434503688264798428,
                1.1513183810852119520,
                5.2299985036725330431,
                2.0345025792886386162,
                1.4954698713476267314,
                2.3883280991170943609,
                5.0337250696321841789,
                0.0717682388851499738,
                0.7176823888514997386,
                0.8936385813354109091,
                2.6532005061745226148,
                1.3992638330268802403,
                1.4262677159096294499,
                1.6963065447371215452,
                4.3966948330120424983,
                6.2678364870429061216,
                6.1296971058127829243,
                4.7483032935115509507,
                3.5007357848584041693,
                3.5914313126861093085,
                4.4983865909631607010,
                1.0015687593745016722,
                3.7325022865654302456,
                5.9090963297563700716,
                2.5422955329474224243,
                0.2902141007558783353,
                2.9021410075587833535,
                3.8886688468694876277,
                1.1875766256173574155,
                5.5925809489939876788,
                5.6603270325031849729,
                0.0546025604155714366,
                0.5460256041557143668,
                5.4602560415571436683,
                4.3370779581347448685,
                5.6716677382699298240,
                0.1680096180830199480,
                1.6800961808301994807,
                4.2345911939428218533,
                4.6468000963506996717,
                2.4857038132498913793,
                6.0074822109601543631,
                3.5261543449852653394,
                3.8456169139547210095,
                0.7570572964696912343,
                1.2873876575173258665,
                0.3075059608140857116,
                3.0750596081408571163,
                5.6178548526902252561,
                5.9130660694655607460,
                2.5819929300393291678,
                0.6871880716749457706,
                0.5886954095698712290,
                5.8869540956987122908,
                2.3208731923708446159,
                4.3591760021696867284,
                5.8926481786193484232,
                2.3778140215772059404,
                4.9285842942332999739,
                5.3035457920758944013,
                2.7699754633222521977,
                2.5670134045041760695,
                0.5373928163234147877,
                5.3739281632341478771,
                3.4737991749047869562,
                3.3220652131499371781,
                1.8047255956014393967,
                5.4808853416552210136,
                4.5433709591155183214
        };
const long double pi = 3.1415926535897932384626;
const long double pi_half = pi/2.0;
const long double pi2 = pi*2;
const long double sqrt_error(1e-9);



long double my_abs(const long double a)
{
    return (a >= 0.0L) ? a : -a;
}

long double my_sqrt(const long double a)
{
    long double res = 1;
    while(my_abs(res*res - a) > sqrt_error)
    {
        res = (res + a/res)/2.0;
    }
    return res;
}

long double my_floor(long double x)
{
    int sign = (x >= 0.0L) ? 1 :-1;
    //assuming that x is not very big
    if(x > ULONG_LONG_MAX)
        std::exit(1);
    return (long double)(unsigned long long)my_abs(x)*sign;
}

//общая функция как для синуса, так для косинуса
long double normalize_angle(const long double& x)
{
    if(x>2*pi)
        return x - my_floor(x/(pi2))*(pi2);
    else if(x < 0.0)
        return x + (my_abs(my_floor(x/(pi2))) + 1)*(pi2);
    else return x;
}

long double sin_tailor(long double);

long double cos_tailor(long double x)
{
    x = normalize_angle(x);
    if(x > pi_half && x <= pi)
        return -sin_tailor(x-pi_half);
    if(x > pi && x <= pi + pi_half)
        return -cos_tailor(x - pi);
    if(x > pi + pi_half && x <= pi2)
        return sin_tailor(x - pi - pi_half);

    long double sum = 0.0;
    long double term = 1.0;
    long double divisor = 0.0;
    do {
        sum += term;
        divisor+=2;
        term *= -x*x/(divisor*(divisor-1));
    } while (my_abs(term) >= sqrt_error);
    return sum;
}


long double sin_tailor(long double x)
{
    x = normalize_angle(x);
    if(x > pi_half && x <= pi)
        return cos_tailor(x-pi_half);
    if(x > pi && x <= pi + pi_half)
        return -sin_tailor(x - pi);
    if(x > pi + pi_half && x <= pi2)
        return -cos_tailor(x - pi - pi_half);

    //теперь x меньше pi на 2
    long double cos_x = cos_tailor(x);
    return my_sqrt(1 - cos_x*cos_x);
}



int main()
{
    std::string number;
    std::cin >> number;

    size_t expPos = number.find('e');
    int exponent = std::stoi(number.substr(expPos+1, number.size()-expPos));


    int dotPos = number.find('.');
    if(dotPos == -1)
        dotPos = expPos;
    int maxPower = dotPos + exponent - 1;


    std::string mantisa = number.substr(0, expPos);
    long double bias;
    for(auto ch : mantisa)
    {
        if(ch == '.')
            continue;

        bias += (ch - '0')*precomputedBiases[maxPower-1];
        --maxPower;
    }

    std::cout << std::setprecision(10) << cos_tailor(bias) << '\n';

}